import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import cern.dip.*;class ValidatorErrHandler implements DipPublicationErrorHandler {	public void handleException(DipPublication dp, DipException de) {		System.out.println("Publication source " + dp.getTopicName()+ " has error " + de.getMessage());	}}/** * @author mdutour * This class is used to verify the behavior of the timestamp fix provided in the DIP API Manager. * It generates updates on demand waiting for the User to type something on the command line. */public class Validator {	public static int noPublications;	public static void main(String args[]) {		// Create the publications		System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");		System.out.println("You have much control over what the Validator does.");		System.out.println("Type \"init\" to declare a DIP Server.");		System.out.println("Type \"start\" or \"restart\" to declare the DIP Publications.");		System.out.println("Type \"suspend\" to destroy the DIP Publications.");		System.out.println("Type \"stop\" to destroy the DIP Publications and exit in a clean way.");		System.out.println("Type \"kill\" to exit in a dirty way.");		if (args.length == 1) {			System.out.println("The DNS to use for this session is:" + args[0]);		} else {			System.out.println("You could specify the DNS to use passing it as a command line argument.");		}		noPublications = 100;		DipFactory dip = null;		DipPublication pub[] = new DipPublication[noPublications];		int intVal = 0;		float floatVal = 0.0f;		String stringValue = intVal + "as a String.";		//Main loop		while (true) {			try {				//Waiting for the user to type something and press return.				System.out.println("Waiting for you to type something.\n");				BufferedReader br = new BufferedReader(new InputStreamReader(System.in));				//  read the username from the command-line; need to use try/catch with the				//  readLine() method				//try {				String userInput = br.readLine();				if (userInput.equalsIgnoreCase("init") == true) {					System.out.println("Request to create the factory.");					//Request to create the factory.					dip = Dip.create("TestPublisher");					if (args.length == 1)						dip.setDNSNode(args[0]);				} else if (userInput.equalsIgnoreCase("suspend") == true) {					//Request to destroy the publications.					System.out.println("Request to destroy the publications.");					//Unregister					for (int i = 0; i < noPublications; i++) {						dip.destroyDipPublication(pub[i]);					}				} else if (userInput.equalsIgnoreCase("restart") == true						|| userInput.equalsIgnoreCase("start") == true) {					//Request to re-declare the publications.					//Unregister					System.out.println("Request to (re-)declare the publications.");					try {						for (int i = 0; i < noPublications; i++) {							String itemName = "dip/test/publication_" + i;							pub[i] = dip.createDipPublication(itemName,									new ValidatorErrHandler());						}					} catch (RuntimeException e) {						System.out.println("it is not allowed to create the publications without having created the DIP factory, type \"init\" first, then \"Start\".");					}				} else if (userInput.equalsIgnoreCase("stop") == true) {					//Stop the clean way and exit					System.out.println("Stop the clean way and exit.");					//Unregister					for (int i = 0; i < noPublications; i++) {						dip.destroyDipPublication(pub[i]);					}					//Exit					System.exit(0);				} else if (userInput.equalsIgnoreCase("kill") == true) {					//Exit the hard way, without stopping the publications.					System.out.println("Exit the hard way, without stopping the publications.");					System.exit(0);				} else {					//Do nothing special.					System.out.println("Updating the publications.");					try {					for (int i = 0; i < noPublications; i++) {						DipData data = dip.createDipData();						data.insert("field1", intVal);						data.insert("field2", floatVal);						data.insert("field3", stringValue);						pub[i].send(data, new DipTimestamp());						intVal += 1;						floatVal += 1.0;						stringValue = intVal + "as a String.";					}					System.out.println("OK, just sent " + noPublications+ " values... ");					if (intVal >= 1000000) {						System.out.println("Keep values below 1000000 for readability...");						intVal = 0;						floatVal = 0.0f;					}				} catch (RuntimeException e) {					System.out.println("it is not allowed to create the publications without having created the DIP factory, type \"init\" first, then \"Start\".");				}				}				//} catch (IOException ioe) {				//   System.out.println("IO error trying to read your name!");				//   System.exit(1);				//}			} catch (DipException e) {				System.out.println("Failed to send DIP data.");			} catch (IOException e) {				System.out.println("Failed to send DIP data.");			}		}		// shutdown		//dip.destroyDipPublication(pub[0]);		//dip.destroyDipPublication(pub[1]);	}}